services:
  postgres_notifications:
    image: postgres:latest
    container_name: postgres_notifications
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5431:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - all

  api:
    build: .  
    container_name: api
    ports:
      - "8009:8009"
    depends_on:
      postgres_notifications: 
        condition: service_healthy
    networks:
      - all
    volumes:
      - .:/app  
    environment:
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      
  zookeeper:
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - all

  notification-service:
    image: python:3.11
    working_dir: /app
    volumes:
      - ./app:/app
    command: >
      sh -c "
        for i in $(seq 1 15); do
          curl -s kafka:29092 >/dev/null && break
          echo 'Kafka ainda não está pronto...'
          sleep 2
        done &&
        echo '✅ Kafka está acessível!' &&
        pip install kafka-python requests python-dotenv &&
        python -u consumer.py
      "
    env_file:
      - .env
    depends_on:
      - kafka
    networks:
      - all

volumes:
  postgres_data:

networks:
  all:
    driver: bridge