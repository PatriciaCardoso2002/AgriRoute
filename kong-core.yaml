# kong-core.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-init-script
data:
  init_kong.sh: |
    #!/bin/sh
    echo "üîÑ Aguardando o Kong estar dispon√≠vel..."

    until curl -s "$KONG_ADMIN/status" >/dev/null; do
      echo "Aguardando o Kong ficar pronto..."
      sleep 2
    done

    echo "‚úÖ Kong pronto!"

    criar_servico() {
      nome=$1
      url=$2
      status=$(curl -s -o /dev/null -w "%{http_code}" "$KONG_ADMIN/services/$nome")
      if [ "$status" -eq 404 ]; then
        echo "üöÄ Criando servi√ßo '$nome' -> $url"
        curl -s -X POST "$KONG_ADMIN/services" \
          --data name=$nome \
          --data url=$url
        echo "‚úÖ Servi√ßo '$nome' criado!"
      else
        echo "‚ÑπÔ∏è Servi√ßo '$nome' j√° existe, ignorando..."
      fi
    }

    criar_rota() {
      nome_rota=$1
      servico=$2
      caminho=$3
      strip=${4:-false}
      protocols=${5:-http,https,wss}

      status=$(curl -s -o /dev/null -w "%{http_code}" "$KONG_ADMIN/routes/$nome_rota")
      if [ "$status" -eq 404 ]; then
        echo "üöÄ Criando rota '$nome_rota' para o servi√ßo '$servico' com path '$caminho'"
        curl -s -X POST "$KONG_ADMIN/services/$servico/routes" \
          --data name=$nome_rota \
          --data paths[]=$caminho \
          --data strip_path=$strip \
          --data "protocols[]=${protocols//,/&protocols[]=}"
        echo "‚úÖ Rota '$nome_rota' criada!"
      else
        echo "‚ÑπÔ∏è Rota '$nome_rota' j√° existe, ignorando..."
      fi
    }

    
    criar_servico "booking-service" "http://booking:8005"
    criar_rota "booking-bookings-route" "booking-service" "/v1/bookings" false
    criar_rota "booking-clients-route" "booking-service" "/v1/clients" false
    
    criar_servico "payments-service" "http://agriroute-payments:80"
    criar_rota "payments-route" "payments-service" "/agriRoute/v1/payments/" false
    
    criar_servico "frontend-service" "http://agriroute-frontend:80"
    criar_rota "frontend-route" "frontend-service" "/agriRoute/v1/frontend" true
    criar_rota "frontend-root-route" "frontend-service" "/" false

    ## ---
    criar_servico "fastapi-service" "http://api-service:8009"
    criar_rota "fastapi-ws" "fastapi-service" "/v1/notifications/ws" false "http,https"
    criar_rota "fastapi-route" "fastapi-service" "/agriRoute/v1/notifications" false "http,https"
    
    criar_servico "routing" "http://routing:8006"
    criar_rota "routing-route" "routing" "/agriRoute/v1/routing" false "http,https"

    echo "üéâ Todos os servi√ßos e rotas foram criados com sucesso!"

---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
spec:
  type: ClusterIP
  # externalIPs:
  #   - 193.136.82.36
  ports:
    - name: proxy
      port: 8000
      targetPort: 8000
    - name: admin
      port: 8001
      targetPort: 8001
  selector:
    app: kong

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
    spec:
      nodeSelector:
        kubernetes.io/hostname: kub12
      containers:
        - name: kong
          image: kong:3.6.1
          ports:
            - containerPort: 8000
            - containerPort: 8001
          env:
            - name: KONG_DATABASE
              value: "postgres"
            - name: KONG_PG_HOST
              value: "kong-postgres"
            - name: KONG_PG_PORT
              value: "5432"
            - name: KONG_PG_USER
              value: "admin"
            - name: KONG_PG_PASSWORD
              value: "admin123"
            - name: KONG_PG_DATABASE
              value: "kong"
            - name: KONG_ADMIN_LISTEN
              value: "0.0.0.0:8001"
            # - name: KONG_PROXY_LISTEN
            #   value: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
            # - name: KONG_SSL_CERT
            #   value: "/etc/kong/cert/fullchain.pem"
            # - name: KONG_SSL_CERT_KEY
            #   value: "/etc/kong/cert/privkey.pem"
          readinessProbe:
            httpGet:
              path: /status
              port: 8001
            initialDelaySeconds: 5
            periodSeconds: 5
