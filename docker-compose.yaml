services:
  postgres:
    image: postgres:15
    container_name: kong_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - all

  booking_db:
    image: postgres:15
    container_name: booking_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - booking_pgdata:/var/lib/postgresql/data
    networks:
      - all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  payments_db:
    image: postgres:15
    container_name: payments_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PAYMENTS_DB_NAME}
      POSTGRES_USER: ${PAYMENTS_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENTS_DB_PASSWORD}
    volumes:
      - payments_pgdata:/var/lib/postgresql/data
    networks:
      - all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAYMENTS_DB_USER} -d ${PAYMENTS_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  kong:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kong
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_PORT: ${POSTGRES_PORT}
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PG_DATABASE: ${POSTGRES_DB}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8002:8000"
      - "8001:8001"
    networks:
      - all

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - notifications

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 5s
      retries: 10
      timeout: 5s
    networks:
      - notifications

  frontend:
    extends:
      file: ./frontend/agriroute/docker-compose.yaml
      service: frontend
    networks:
      - all
      - notifications

  booking:
    extends:
      file: ./booking-service/docker-compose.yaml
      service: booking_service
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - all
      - notifications

  routing:
    extends:
      file: ./routing/docker-compose.yaml
      service: routing
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - all
      - notifications

  payment-service:
    extends:
      file: ./payment-service/payments/docker-compose.yaml
      service: payments
    depends_on:
      payments_db:
        condition: service_healthy
    networks:
      - all
      - notifications

  notification-service:
    extends:
      file: ./notificationService/docker-compose.yaml
      service: api
    networks:
      - all
      - notifications

volumes:
  kong_postgres_data:
  booking_pgdata:
  payments_pgdata:

networks:
  all:
    driver: bridge
  notifications:
    driver: bridge